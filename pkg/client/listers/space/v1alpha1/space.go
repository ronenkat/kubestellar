//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The KubeStellar Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"

	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	"github.com/kcp-dev/logicalcluster/v3"

	spacev1alpha1 "github.com/kubestellar/kubestellar/pkg/apis/space/v1alpha1"
)

// SpaceClusterLister can list Spaces across all workspaces, or scope down to a SpaceLister for one workspace.
// All objects returned here must be treated as read-only.
type SpaceClusterLister interface {
	// List lists all Spaces in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*spacev1alpha1.Space, err error)
	// Cluster returns a lister that can list and get Spaces in one workspace.
	Cluster(clusterName logicalcluster.Name) SpaceLister
	SpaceClusterListerExpansion
}

type spaceClusterLister struct {
	indexer cache.Indexer
}

// NewSpaceClusterLister returns a new SpaceClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
// - has the kcpcache.ClusterAndNamespaceIndex as an index
func NewSpaceClusterLister(indexer cache.Indexer) *spaceClusterLister {
	return &spaceClusterLister{indexer: indexer}
}

// List lists all Spaces in the indexer across all workspaces.
func (s *spaceClusterLister) List(selector labels.Selector) (ret []*spacev1alpha1.Space, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*spacev1alpha1.Space))
	})
	return ret, err
}

// Cluster scopes the lister to one workspace, allowing users to list and get Spaces.
func (s *spaceClusterLister) Cluster(clusterName logicalcluster.Name) SpaceLister {
	return &spaceLister{indexer: s.indexer, clusterName: clusterName}
}

// SpaceLister can list Spaces across all namespaces, or scope down to a SpaceNamespaceLister for one namespace.
// All objects returned here must be treated as read-only.
type SpaceLister interface {
	// List lists all Spaces in the workspace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*spacev1alpha1.Space, err error)
	// Spaces returns a lister that can list and get Spaces in one workspace and namespace.
	Spaces(namespace string) SpaceNamespaceLister
	SpaceListerExpansion
}

// spaceLister can list all Spaces inside a workspace or scope down to a SpaceLister for one namespace.
type spaceLister struct {
	indexer     cache.Indexer
	clusterName logicalcluster.Name
}

// List lists all Spaces in the indexer for a workspace.
func (s *spaceLister) List(selector labels.Selector) (ret []*spacev1alpha1.Space, err error) {
	err = kcpcache.ListAllByCluster(s.indexer, s.clusterName, selector, func(i interface{}) {
		ret = append(ret, i.(*spacev1alpha1.Space))
	})
	return ret, err
}

// Spaces returns an object that can list and get Spaces in one namespace.
func (s *spaceLister) Spaces(namespace string) SpaceNamespaceLister {
	return &spaceNamespaceLister{indexer: s.indexer, clusterName: s.clusterName, namespace: namespace}
}

// spaceNamespaceLister helps list and get Spaces.
// All objects returned here must be treated as read-only.
type SpaceNamespaceLister interface {
	// List lists all Spaces in the workspace and namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*spacev1alpha1.Space, err error)
	// Get retrieves the Space from the indexer for a given workspace, namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*spacev1alpha1.Space, error)
	SpaceNamespaceListerExpansion
}

// spaceNamespaceLister helps list and get Spaces.
// All objects returned here must be treated as read-only.
type spaceNamespaceLister struct {
	indexer     cache.Indexer
	clusterName logicalcluster.Name
	namespace   string
}

// List lists all Spaces in the indexer for a given workspace and namespace.
func (s *spaceNamespaceLister) List(selector labels.Selector) (ret []*spacev1alpha1.Space, err error) {
	err = kcpcache.ListAllByClusterAndNamespace(s.indexer, s.clusterName, s.namespace, selector, func(i interface{}) {
		ret = append(ret, i.(*spacev1alpha1.Space))
	})
	return ret, err
}

// Get retrieves the Space from the indexer for a given workspace, namespace and name.
func (s *spaceNamespaceLister) Get(name string) (*spacev1alpha1.Space, error) {
	key := kcpcache.ToClusterAwareKey(s.clusterName.String(), s.namespace, name)
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(spacev1alpha1.Resource("Space"), name)
	}
	return obj.(*spacev1alpha1.Space), nil
}

// NewSpaceLister returns a new SpaceLister.
// We assume that the indexer:
// - is fed by a workspace-scoped LIST+WATCH
// - uses cache.MetaNamespaceKeyFunc as the key function
// - has the cache.NamespaceIndex as an index
func NewSpaceLister(indexer cache.Indexer) *spaceScopedLister {
	return &spaceScopedLister{indexer: indexer}
}

// spaceScopedLister can list all Spaces inside a workspace or scope down to a SpaceLister for one namespace.
type spaceScopedLister struct {
	indexer cache.Indexer
}

// List lists all Spaces in the indexer for a workspace.
func (s *spaceScopedLister) List(selector labels.Selector) (ret []*spacev1alpha1.Space, err error) {
	err = cache.ListAll(s.indexer, selector, func(i interface{}) {
		ret = append(ret, i.(*spacev1alpha1.Space))
	})
	return ret, err
}

// Spaces returns an object that can list and get Spaces in one namespace.
func (s *spaceScopedLister) Spaces(namespace string) SpaceNamespaceLister {
	return &spaceScopedNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// spaceScopedNamespaceLister helps list and get Spaces.
type spaceScopedNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Spaces in the indexer for a given workspace and namespace.
func (s *spaceScopedNamespaceLister) List(selector labels.Selector) (ret []*spacev1alpha1.Space, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(i interface{}) {
		ret = append(ret, i.(*spacev1alpha1.Space))
	})
	return ret, err
}

// Get retrieves the Space from the indexer for a given workspace, namespace and name.
func (s *spaceScopedNamespaceLister) Get(name string) (*spacev1alpha1.Space, error) {
	key := s.namespace + "/" + name
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(spacev1alpha1.Resource("Space"), name)
	}
	return obj.(*spacev1alpha1.Space), nil
}
