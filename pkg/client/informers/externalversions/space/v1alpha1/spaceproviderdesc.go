//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The KubeStellar Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha1

import (
	"context"
	"time"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"

	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	kcpinformers "github.com/kcp-dev/apimachinery/v2/third_party/informers"
	"github.com/kcp-dev/logicalcluster/v3"

	spacev1alpha1 "github.com/kubestellar/kubestellar/pkg/apis/space/v1alpha1"
	scopedclientset "github.com/kubestellar/kubestellar/pkg/client/clientset/versioned"
	clientset "github.com/kubestellar/kubestellar/pkg/client/clientset/versioned/cluster"
	"github.com/kubestellar/kubestellar/pkg/client/informers/externalversions/internalinterfaces"
	spacev1alpha1listers "github.com/kubestellar/kubestellar/pkg/client/listers/space/v1alpha1"
)

// SpaceProviderDescClusterInformer provides access to a shared informer and lister for
// SpaceProviderDescs.
type SpaceProviderDescClusterInformer interface {
	Cluster(logicalcluster.Name) SpaceProviderDescInformer
	Informer() kcpcache.ScopeableSharedIndexInformer
	Lister() spacev1alpha1listers.SpaceProviderDescClusterLister
}

type spaceProviderDescClusterInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewSpaceProviderDescClusterInformer constructs a new informer for SpaceProviderDesc type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewSpaceProviderDescClusterInformer(client clientset.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredSpaceProviderDescClusterInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredSpaceProviderDescClusterInformer constructs a new informer for SpaceProviderDesc type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredSpaceProviderDescClusterInformer(client clientset.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) kcpcache.ScopeableSharedIndexInformer {
	return kcpinformers.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.SpaceV1alpha1().SpaceProviderDescs().List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.SpaceV1alpha1().SpaceProviderDescs().Watch(context.TODO(), options)
			},
		},
		&spacev1alpha1.SpaceProviderDesc{},
		resyncPeriod,
		indexers,
	)
}

func (f *spaceProviderDescClusterInformer) defaultInformer(client clientset.ClusterInterface, resyncPeriod time.Duration) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredSpaceProviderDescClusterInformer(client, resyncPeriod, cache.Indexers{
		kcpcache.ClusterIndexName: kcpcache.ClusterIndexFunc,
	},
		f.tweakListOptions,
	)
}

func (f *spaceProviderDescClusterInformer) Informer() kcpcache.ScopeableSharedIndexInformer {
	return f.factory.InformerFor(&spacev1alpha1.SpaceProviderDesc{}, f.defaultInformer)
}

func (f *spaceProviderDescClusterInformer) Lister() spacev1alpha1listers.SpaceProviderDescClusterLister {
	return spacev1alpha1listers.NewSpaceProviderDescClusterLister(f.Informer().GetIndexer())
}

// SpaceProviderDescInformer provides access to a shared informer and lister for
// SpaceProviderDescs.
type SpaceProviderDescInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() spacev1alpha1listers.SpaceProviderDescLister
}

func (f *spaceProviderDescClusterInformer) Cluster(clusterName logicalcluster.Name) SpaceProviderDescInformer {
	return &spaceProviderDescInformer{
		informer: f.Informer().Cluster(clusterName),
		lister:   f.Lister().Cluster(clusterName),
	}
}

type spaceProviderDescInformer struct {
	informer cache.SharedIndexInformer
	lister   spacev1alpha1listers.SpaceProviderDescLister
}

func (f *spaceProviderDescInformer) Informer() cache.SharedIndexInformer {
	return f.informer
}

func (f *spaceProviderDescInformer) Lister() spacev1alpha1listers.SpaceProviderDescLister {
	return f.lister
}

type spaceProviderDescScopedInformer struct {
	factory          internalinterfaces.SharedScopedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

func (f *spaceProviderDescScopedInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&spacev1alpha1.SpaceProviderDesc{}, f.defaultInformer)
}

func (f *spaceProviderDescScopedInformer) Lister() spacev1alpha1listers.SpaceProviderDescLister {
	return spacev1alpha1listers.NewSpaceProviderDescLister(f.Informer().GetIndexer())
}

// NewSpaceProviderDescInformer constructs a new informer for SpaceProviderDesc type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewSpaceProviderDescInformer(client scopedclientset.Interface, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredSpaceProviderDescInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredSpaceProviderDescInformer constructs a new informer for SpaceProviderDesc type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredSpaceProviderDescInformer(client scopedclientset.Interface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.SpaceV1alpha1().SpaceProviderDescs().List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.SpaceV1alpha1().SpaceProviderDescs().Watch(context.TODO(), options)
			},
		},
		&spacev1alpha1.SpaceProviderDesc{},
		resyncPeriod,
		indexers,
	)
}

func (f *spaceProviderDescScopedInformer) defaultInformer(client scopedclientset.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredSpaceProviderDescInformer(client, resyncPeriod, cache.Indexers{}, f.tweakListOptions)
}
